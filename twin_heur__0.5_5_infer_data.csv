Class,Method Name,Arg/Ret/Var,Variable Name,Inferred Type,Original Type,Exact (E) / Up to Parameter (P) / Got Type (T) / None (N),Solution Source,Source Code
ResponsesCsvExporter,answers_table,Ret,"","Table<{ id: Number, response_id: Number, question_id: Number, value: String, created_at: (DateTime or Time), updated_at: (DateTime or Time), questionnaire_id: Number, saved_page: Number, submitted: (false or true), person_id: Number, submitted_at: (DateTime or Time), notes: String, type: String, position: Number, caption: String, required: (false or true), min: Number, max: Number, step: Number, page_id: Number, default_answer: String, layout: String, radio_layout: String, title: String, option: String, output_value: String, __all_joined: (:answers or :pages or :question_options or :questions or :responses), __last_joined: :question_options, __selected: nil, __orm: false }>","Table<{ id: Number, response_id: Number, question_id: Number, value: String, created_at: (DateTime or Time), updated_at: (DateTime or Time), questionnaire_id: Number, saved_page: Number, submitted: (false or true), person_id: Number, submitted_at: (DateTime or Time), notes: String, type: String, position: Number, caption: String, required: (false or true), min: Number, max: Number, step: Number, page_id: Number, default_answer: String, layout: String, radio_layout: String, title: String, option: String, output_value: String, __all_joined: (:answers or :pages or :question_options or :questions or :responses), __last_joined: :question_options, __selected: nil, __orm: false }>",E,Constraints,"def answers_table
    db[:answers].
      inner_join(:responses, :id => :response_id).
      inner_join(:questions, :id => Sequel.qualify(:answers, :question_id)).
      inner_join(:pages, :id => Sequel.qualify(:questions, :page_id)).
      left_join(:question_options, :question_id => Sequel.qualify(:answers, :question_id), :option => Sequel.qualify(:answers, :value)).
      where(Sequel.qualify(:responses, :questionnaire_id) => questionnaire.id)
  end"
ResponsesCsvExporter,each_row,Ret,"",nil,%any,E,Constraints,"def each_row
    if rotate
      valid_response_ids = db[:answers].select(:response_id).inner_join(:responses, :id => :response_id).where(:questionnaire_id => questionnaire.id)

      response_metadata = db[:responses].order(:id).where(:id => valid_response_ids).select(:id, :submitted_at, :notes).all
      response_ids = response_metadata.map { |resp| resp[:id] }
      yield [""id""] + response_ids
      yield [""Submitted""] + response_metadata.map { |resp| resp[:submitted_at] }
      yield [""Notes""] + response_metadata.map { |resp| resp[:notes] }

      ds = answers_table.order(Sequel.qualify(:pages, :position), Sequel.qualify(:questions, :position), Sequel.qualify(:responses, :id)).
        select(Sequel.qualify(:answers, :question_id), Sequel.qualify(:questions, :caption), Sequel.qualify(:answers, :response_id), Sequel.qualify(:answers, :value), Sequel.qualify(:question_options, :output_value))

      current_response_index = 0
      current_question_id = 0
      current_row = nil
      ds.each do |db_row|
        if db_row[:question_id] != current_question_id
          yield current_row if current_row
          current_row = [db_row[:caption]]
          current_response_index = 0
          current_question_id = db_row[:question_id]
        end

        current_response_id = response_ids[current_response_index]
        if current_response_id != db_row[:response_id]
          skip_to = response_ids.find_index(db_row[:response_id])
          if skip_to
            (skip_to - current_response_index).times { current_row << """" }
            current_response_index = skip_to
          else
            next
          end
        end

        db_row[:output_value] = nil if db_row[:output_value].blank?
        current_row << (db_row[:output_value] || db_row[:value] || """")
        current_response_index += 1
      end
      yield current_row if current_row
    else
      columns = questionnaire.fields

      header = [""id"", ""Submitted"", ""Notes""]
      header += columns.collect { |c| c.caption }
      yield header

      ds = answers_table.order(Sequel.desc(Sequel.qualify(:responses, :id)), Sequel.qualify(:pages, :position), Sequel.qualify(:questions, :position)).
        select(Sequel.qualify(:responses, :id), Sequel.qualify(:responses, :submitted_at), Sequel.qualify(:responses, :notes), Sequel.qualify(:answers, :question_id), Sequel.qualify(:answers, :value), Sequel.qualify(:question_options, :output_value))

      column_ids = columns.map(&:id)
      current_column_index = 0
      current_response_id = 0
      current_row = nil
      ds.each do |db_row|
        if db_row[:id] != current_response_id
          yield current_row if current_row
          current_row = [db_row[:id], db_row[:submitted_at], db_row[:notes]]
          current_column_index = 0
          current_response_id = db_row[:id]
        end

        current_column_id = column_ids[current_column_index]
        if current_column_id != db_row[:question_id]
          skip_to = column_ids.find_index(db_row[:question_id])
          if skip_to
            (skip_to - current_column_index).times { current_row << """" }
            current_column_index = skip_to
          else
            next
          end
        end

        db_row[:output_value] = nil if db_row[:output_value].blank?
        current_row << (db_row[:output_value] || db_row[:value] || """")
        current_column_index += 1
      end
      yield current_row if current_row
    end
  end"
GraphsController,@questionnaire,Var,@questionnaire,Questionnaire,Questionnaire,E,Heur: is_model,""
GraphsController,aggregate_questions,Arg,question_ids,(Array<Number> or Number),(Array<Number> or Number),E,Constraints,"def aggregate_questions(question_ids)
    db = RailsSequel.connect
    
    skip_no_answer = params[:skip_no_answer]
          
    ds = db[:answers]
    ds = ds.inner_join(:questions, :id => :answers__question_id)
    ds = ds.inner_join(:pages, :id => :questions__page_id)
    ds = ds.left_join(:question_options, :question_id => :answers__question_id, :option => :answers__value)
    ds = ds.where(:questions__id => question_ids)
    ds = ds.where(:pages__questionnaire_id => @questionnaire.id)
    ds = ds.select(:questions__id, :answers__value, :question_options__output_value)
    
    counts = {}
    ds.each do |db_row|
      question_id = db_row[:id]
      value = (db_row[:output_value] || db_row[:value])
      if value.blank?
        if skip_no_answer
          next
        else
          value = ""No answer""
        end
      end
      
      counts[question_id] ||= {}
      counts[question_id][value] ||= 0
      counts[question_id][value] += 1
    end
    
    unless skip_no_answer
      Question.where(id: question_ids).find_each do |question|
        ## MKCHANGE: get rid of use of rails scopes
        #no_answer = @questionnaire.responses.valid.no_answer_for(question).count()
        no_answer = @questionnaire.responses.where(""responses.id in (select response_id from answers)"").where(""responses.id not in (select response_id from answers where question_id = ?)"", question.id).count()
        if no_answer > 0
          counts[question.id][""No answer""] = no_answer
        end
      end
    end
    
    return counts
  end"
GraphsController,aggregate_questions,Ret,"","Hash<Number, Hash<String, Number>>","Hash<Number, Hash<String, Number>>",E,Constraints,"def aggregate_questions(question_ids)
    db = RailsSequel.connect
    
    skip_no_answer = params[:skip_no_answer]
          
    ds = db[:answers]
    ds = ds.inner_join(:questions, :id => :answers__question_id)
    ds = ds.inner_join(:pages, :id => :questions__page_id)
    ds = ds.left_join(:question_options, :question_id => :answers__question_id, :option => :answers__value)
    ds = ds.where(:questions__id => question_ids)
    ds = ds.where(:pages__questionnaire_id => @questionnaire.id)
    ds = ds.select(:questions__id, :answers__value, :question_options__output_value)
    
    counts = {}
    ds.each do |db_row|
      question_id = db_row[:id]
      value = (db_row[:output_value] || db_row[:value])
      if value.blank?
        if skip_no_answer
          next
        else
          value = ""No answer""
        end
      end
      
      counts[question_id] ||= {}
      counts[question_id][value] ||= 0
      counts[question_id][value] += 1
    end
    
    unless skip_no_answer
      Question.where(id: question_ids).find_each do |question|
        ## MKCHANGE: get rid of use of rails scopes
        #no_answer = @questionnaire.responses.valid.no_answer_for(question).count()
        no_answer = @questionnaire.responses.where(""responses.id in (select response_id from answers)"").where(""responses.id not in (select response_id from answers where question_id = ?)"", question.id).count()
        if no_answer > 0
          counts[question.id][""No answer""] = no_answer
        end
      end
    end
    
    return counts
  end"
GraphsController,@questions,Var,@questions,ActiveRecord_Relation<Question>,ActiveRecord_Relation<Question>,E,Constraints,""
GraphsController,@counts,Var,@counts,"Hash<Number, Hash<String, Number>>","Hash<Number, Hash<String, Number>>",E,Constraints,""
GraphsController,@min,Var,@min,{ GraphsController# var: @min },Number,N,,""
GraphsController,@max,Var,@max,Page,Number,T,Twin,""
GraphsController,@geom,Var,@geom,Questionnaire,String,T,Twin,""
GraphsController,@graph,Var,@graph,(Gruff::Line or Gruff::Pie),Gruff::Base,E,Constraints,""
GraphsController,@labels,Var,@labels,"Hash<Number, String>","Hash<Number, String>",E,Constraints,""
GraphsController,@series,Var,@series,"Hash<Question, Array<{ GraphsController#line array_param: array_param_#<Parser::Source::Map::Collection:0x00007fb2cbb89158> }>>","Hash<Question, Array<Number>>",P,Constraints,""
GraphsController,line,Ret,"",Array<String>,Array<String>,E,Constraints,"def line
    authorize! :view_answers, @questionnaire
    
    @questions = Question.where(id: params[:question_ids]).all
    @counts = aggregate_questions(params[:question_ids])
    @min = @questions.collect { |q| q.min }.min
    @max = @questions.collect { |q| q.max }.max
    
    @graph = Gruff::Line.new(@geom)
  
    i = 0
    @labels = {}
    @series = {}
    @min.upto(@max) do |answer|
      @labels[i] = answer.to_s
      @questions.each do |question|
        @series[question] ||= []
        @series[question] << (@counts[question.id][answer.to_s] || 0)
      end
      i += 1
    end

    @graph.labels = @labels
    @series.each do |question, values|
      @graph.data(question.caption, values)
    end

    @graph.title = ""Answer frequency""
    set_journey_theme(@graph)
    
    render text: @graph.to_blob
  end"
GraphsController,@answercounts,Var,@answercounts,"Hash<String, Number>","Hash<String, Number>",E,Constraints,""
GraphsController,@question,Var,@question,Question,Question,E,Constraints,""
GraphsController,pie,Ret,"",Array<String>,Array<String>,E,Constraints,"def pie
    authorize! :view_answers, @questionnaire
    
    @answercounts = aggregate_questions(params[:question_id]).values.first
    @question = Question.find(params[:question_id])
    
    @graph = Gruff::Pie.new(@geom)
  
    @answercounts.each do |answer, count|
      @graph.data(answer, [count])
    end

    #@graph.title = truncate(@question.caption || ""Untitled question"")
    set_journey_theme(@graph)
    
    render text: @graph.to_blob
  end"
RootController,@new_questionnaires,Var,@new_questionnaires,ActiveRecord_Relation<Questionnaire>,ActiveRecord_Relation<Questionnaire>,E,Constraints,""
RootController,get_new_questionnaires,Ret,"",ActiveRecord_Relation<Questionnaire>,ActiveRecord_Relation<Questionnaire>,E,Constraints,"def get_new_questionnaires
    @new_questionnaires = Questionnaire.where(:publicly_visible => true, :is_open => true).order(""published_at DESC"").limit(8)
  end"
RootController,@page_title,Var,@page_title,String,String,E,Constraints,""
RootController,@my_questionnaires,Var,@my_questionnaires,(ActiveRecord_Relation<Questionnaire> or Array<Questionnaire>),Array<Questionnaire>,P,Twin,""
RootController,@responses,Var,@responses,"ActiveRecord_Relation<JoinTable<Response, Questionnaire>>","ActiveRecord_Relation<JoinTable<Response, Questionnaire>>",E,Constraints,""
RootController,dashboard,Ret,"","(ActiveRecord_Relation<JoinTable<Response, Questionnaire>> or String)",%any,E,Constraints,"def dashboard
    return index unless person_signed_in?
    
    @page_title = ""Dashboard""
    
    @my_questionnaires = QuestionnairePermission.for_person(current_person).allows_anything.
      order(""questionnaire_id DESC"").includes(:questionnaire).to_a.map(&:questionnaire).compact
    
    @responses = Response.where(:person_id => current_person.id).includes(:questionnaire).order(:created_at => :desc).limit(8)
  end"
[s]Answer,find_answer,Arg,resp,Question,Response,T,Twin,"def self.find_answer(resp, question)
    where(response_id: resp.id, question_id: question.id).first
  end"
[s]Answer,find_answer,Arg,question,Question,Question,E,Heur: is_model,"def self.find_answer(resp, question)
    where(response_id: resp.id, question_id: question.id).first
  end"
[s]Answer,find_answer,Ret,"",Answer,Answer,E,Constraints,"def self.find_answer(resp, question)
    where(response_id: resp.id, question_id: question.id).first
  end"
_Globals,$!,Var,$!,Array<String>,String,T,Twin,""
QuestionnairePermission,email=,Arg,email,(String or Symbol),String,E,Constraints,"def email=(email)
    if email.blank?
      self.person = nil
      return
    end
    
    logger.info ""Trying to find person with email #{email}""
    self.person = Person.find_by(email: email)
    if email and self.person.nil?
      logger.info ""Not found, trying Illyan invite""
      begin
        invitee = IllyanClient::Person.new(:person => { :email => email })
        invitee.save
        logger.info ""Invite successful!  Got back #{invitee.inspect}""
        
        invitee_attrs = invitee.attributes
        self.person = Person.create(:email => email, :username => email, :firstname => invitee_attrs[""firstname""], 
          :lastname => invitee_attrs[""lastname""], :gender => invitee_attrs[""gender""], :birthdate => RDL.type_cast(invitee_attrs[""birthdate""], ""DateTime"")) ## MKCHANGE
      rescue
        logger.error ""Error during invite: #{$!}""
        errors.add(:base, ""Error inviting new user #{email}: $!"")
      end
    end
  end"
QuestionnairePermission,email=,Ret,"",(Array<String> or Person),%any,E,Constraints,"def email=(email)
    if email.blank?
      self.person = nil
      return
    end
    
    logger.info ""Trying to find person with email #{email}""
    self.person = Person.find_by(email: email)
    if email and self.person.nil?
      logger.info ""Not found, trying Illyan invite""
      begin
        invitee = IllyanClient::Person.new(:person => { :email => email })
        invitee.save
        logger.info ""Invite successful!  Got back #{invitee.inspect}""
        
        invitee_attrs = invitee.attributes
        self.person = Person.create(:email => email, :username => email, :firstname => invitee_attrs[""firstname""], 
          :lastname => invitee_attrs[""lastname""], :gender => invitee_attrs[""gender""], :birthdate => RDL.type_cast(invitee_attrs[""birthdate""], ""DateTime"")) ## MKCHANGE
      rescue
        logger.error ""Error during invite: #{$!}""
        errors.add(:base, ""Error inviting new user #{email}: $!"")
      end
    end
  end"
Response,answer_for_question,Arg,question,Question,Question,E,Heur: is_model,"def answer_for_question(question)
    answers.select { |a| a.question == question }[0]
  end"
Response,answer_for_question,Ret,"",Answer,Answer,E,Constraints,"def answer_for_question(question)
    answers.select { |a| a.question == question }[0]
  end"
QuestionnairesController,@questionnaires,Var,@questionnaires,(ActiveRecord_Relation<Questionnaire> or Array<Questionnaire>),"ActiveRecord_Relation<JoinTable<Questionnaire, (Person or QuestionnairePermission or Tag)>>",P,Heur: is_pluralized_model,""
QuestionnairesController,@rss_url,Var,@rss_url,String,String,E,Twin,""
QuestionnairesController,index,Ret,"",(Array<String> or String),(Array<String> or String),E,Constraints,"def index
    p = person_signed_in? ? current_person : nil
    per_page = 12
    conditions = []
    condition_vars = {}
    if params[:title] and params[:title] != ''
      conditions.push(""lower(title) like :title"")
      condition_vars[:title] =""%#{params[:title].downcase}%""
    end
    
    if !params[:tag].blank?
      conditions << ""tags.name = :tag_name""
      condition_vars[:tag_name] = params[:tag]
    end
        
    questionnaire_scope = Questionnaire.accessible_by(current_ability).
      order(id: :desc).
      group(""questionnaires.id"").
      includes(:tags, questionnaire_permissions: :person).
      references(:tags)
    questionnaire_scope = questionnaire_scope.where(conditions.join("" and ""), condition_vars) if conditions.any?
    @questionnaires = questionnaire_scope.paginate(page: params[:page] || 1, per_page: per_page)
    
    @rss_url = questionnaires_url(:format => ""rss"")

    respond_to do |format|
      format.html { }
      format.rss  { render :layout => false }
    end
  end"
QuestionnairesController,@questionnaire,Var,@questionnaire,Questionnaire,Questionnaire,E,Constraints,""
QuestionnairesController,show,Ret,"",(Array<String> or String),(Array<String> or String),E,Constraints,"def show
    @questionnaire = Questionnaire.find(params[:id])
    authorize! :view_edit_pages, @questionnaire
    attributes = params[:attributes] || @questionnaire.attribute_names
    attributes.delete ""rss_secret""

    respond_to do |format|
      format.html {}
      format.xml do
        if person_signed_in? and current_person.can?(:edit, @questionnaire)
          headers[""Content-Disposition""] = ""attachment; filename=\""#{@questionnaire.title}.xml\""""
          render :xml => @questionnaire.to_xml
        else
          render :text => ""You're not allowed to edit this questionnaire."", :status => :forbidden
        end
      end
      format.json do
        if person_signed_in? and current_person.can?(:edit, @questionnaire)
          render :json => @questionnaire.to_json(:only => attributes)
        else
          render :text => ""You're not allowed to edit this questionnaire."", :status => :forbidden
        end
      end
    end
  end"
AnswerController,@questionnaire,Var,@questionnaire,Questionnaire,Questionnaire,E,Constraints,""
AnswerController,get_questionnaire,Ret,"",Questionnaire,Questionnaire,E,Constraints,"def get_questionnaire
    @questionnaire = Questionnaire.find params[:id]
  end"
AnswerController,@resp,Var,@resp,Response,Response,E,Constraints,""
AnswerController,@page,Var,@page,Page,Page,E,Constraints,""
AnswerController,@error_messages,Var,@error_messages,Array<String>,Array<String>,E,Constraints,""
AnswerController,save_answers,Ret,"",String,String,E,Constraints,"def save_answers
    @resp = Response.find(session[""response_#{params[:id]}""])
    @page = @resp.questionnaire.pages[params[:current_page].to_i - 1]

    @page.questions.each do |question|
      if question.kind_of? Questions::Field
        ans = @resp.answer_for_question(question)
        if answer_given(question.id)
          if ans.nil?
            ans = Answer.new :question_id => question.id, :response_id => @resp.id
          end
          if question.kind_of?(Questions::CheckBoxField) && params[:question][question.id.to_s].to_s == '0'
            ans.value = nil
          else
            ans.value = params[:question][question.id.to_s]
          end

          ans.save
        else
          # No answer provided
          if not ans.nil?
            ans.destroy
          end
        end
      end
    end

    if params[:commit] =~ /later/i
      redirect_to :action => ""save_session"", :id => @resp.questionnaire.id, :current_page => params[:current_page]
      return
    else
      offset = if params[:commit] =~ /[<>]/
        params[:commit] =~ />/ ? 1 : -1
      else
        0
      end
      if offset != -1
        errors = validate_answers(@resp, @page)
        if errors.length > 0
          @error_messages = errors
          @resp.reload
          render :action => ""index"", :id => @resp.questionnaire.id, :page => params[:current_page]
          return
        end
      end
      if offset == 0
        @resp.submitted = true
        @resp.submitted_at = Time.now
        @resp.save

        ## MKCHANGE: changed below because `notify_on_response_submit` comes from Rails scope
        #@questionnaire.email_notifications.notify_on_response_submit.includes(:person).each do |notification|
        @questionnaire.email_notifications.where(notify_on_response_submit: true).includes(:person).each do |notification|
          next unless notification.try(:person).try(:email).present?
          NotificationMailer.response_submitted(@resp, notification.person).deliver_later
        end

        redirect_to :action => ""save_session"", :id => @resp.questionnaire.id, :current_page => 1
      else
        new_page = params[:current_page].to_i + offset
        @resp.saved_page = new_page
        @resp.save
        redirect_to :action => ""index"", :id => @resp.questionnaire.id, :page => new_page
      end
    end
  end"
AnswerController,@previewing,Var,@previewing,(false or true),(false or true),E,Constraints,""
AnswerController,preview,Ret,"",Array<String>,Array<String>,E,Constraints,"def preview
    @questionnaire = Questionnaire.includes(:questionnaire_permissions, :pages).find(params[:id])

    if @questionnaire.pages.size > 0
      @page = @questionnaire.pages[(params[:page] || 1).to_i - 1]

      @resp = @questionnaire.responses.build
      @previewing = true
      render :action => ""index""
    else
      render :action => ""prompt""
    end
  end"
AnswerController,questionnaire_closed,Ret,"",Questionnaire,Questionnaire,E,Constraints,"def questionnaire_closed
    @questionnaire = Questionnaire.find(params[:id])
  end"
AnswerController,prompt,Ret,"",Array<Response>,Array<Response>,E,Constraints,"def prompt
    @all_responses = []
    @responses = []
    if person_signed_in?
      @all_responses = @questionnaire.responses.where(person_id: current_person.id).to_a
      if @questionnaire.allow_finish_later
        @responses += @all_responses.select { |resp| not resp.submitted }
      end
      if @questionnaire.allow_amend_response
        @responses += @all_responses.select { |resp| resp.submitted }
      end
    end
  end"
AnswerController,resume,Ret,"",String,String,E,Constraints,"def resume
    @resp = Response.find(params[:id])
    if @resp.person != current_person
      raise ""That response does not belong to you.  Either log in as a different person, or start a new response.""
    else
      # If this is an amended response, we want to retract the submitted response set.
      if @resp.submitted
        if not @resp.questionnaire.allow_amend_response
          raise ""This questionnaire does not allow you to amend submitted responses.""
        end
        @resp.submitted = false
        @resp.submitted_at = nil
        @resp.save
      else
        if not @resp.questionnaire.allow_finish_later
          raise ""This questionnaire does not allow you to resume a session.""
        end
      end

      qid = @resp.questionnaire.id
      session[""response_#{qid}""] = @resp.id
      redirect_to :action => 'index', :id => qid, :page => @resp[:saved_page]
    end
  rescue
    flash[:error_messages] = [$!.to_s]
    redirect_to :action => 'prompt', :id => @resp.questionnaire.id
  end"
ResponsesController,@questionnaire,Var,@questionnaire,Questionnaire,Questionnaire,E,Heur: is_model,""
ResponsesController,@email_notification,Var,@email_notification,EmailNotification,EmailNotification,E,Constraints,""
ResponsesController,get_email_notification,Ret,"",EmailNotification,EmailNotification,E,Constraints,"def get_email_notification
    @email_notification = @questionnaire.email_notifications.where(person_id: current_person.id).first
  end"
RootController,index,Ret,"",String,%any,E,Constraints,"def index
    redirect_to Journey::SiteOptions.site_root(person_signed_in?), :status => 307
  end"
ApplicationController,current_ability,Ret,"",Ability,Ability,E,Constraints,"def current_ability
    Ability.new(current_person)
  end"
AnswerController,answer_given,Arg,question_id,Number,Number,E,Heur: int_names,"def answer_given(question_id)
    return (params[:question] and not params[:question][question_id.to_s].blank? and
      params[:question][question_id.to_s].length > 0)
  end"
AnswerController,answer_given,Ret,"",(false or true),(false or true),E,Constraints,"def answer_given(question_id)
    return (params[:question] and not params[:question][question_id.to_s].blank? and
      params[:question][question_id.to_s].length > 0)
  end"
AnswerController,validate_answers,Arg,resp,{ AnswerController#validate_answers arg: resp },Response,N,,"def validate_answers(resp, page)
    errors = []
    page.questions.each do |question|
      if question.kind_of? Questions::Field and question.required
        if not answer_given(question.id)
            errors << ""You didn't answer the question \""#{question.caption}\"", which is required.""
        end
      end
    end
    return errors
  end"
AnswerController,validate_answers,Arg,page,Page,Page,E,Heur: is_model,"def validate_answers(resp, page)
    errors = []
    page.questions.each do |question|
      if question.kind_of? Questions::Field and question.required
        if not answer_given(question.id)
            errors << ""You didn't answer the question \""#{question.caption}\"", which is required.""
        end
      end
    end
    return errors
  end"
AnswerController,validate_answers,Ret,"",Array<String>,Array<String>,E,Constraints,"def validate_answers(resp, page)
    errors = []
    page.questions.each do |question|
      if question.kind_of? Questions::Field and question.required
        if not answer_given(question.id)
            errors << ""You didn't answer the question \""#{question.caption}\"", which is required.""
        end
      end
    end
    return errors
  end"
Total # E:,48
Total # P:,3
Total # T:,4
Total # TS:,0
Total # N:,2
Total # return types:,23
Total # arg types:,8
Total # var types:,26
Total # individual types:,57
