Difference encountered for GraphsController#@questionnaire.
Inferred: ([ id: () -> { { GraphsController# var: @questionnaire }#id ret: ret } ] and [ responses: () -> { { GraphsController# var: @questionnaire }#responses ret: ret } ])
Original: Questionnaire
Difference encountered for GraphsController#@max.
Inferred: { GraphsController# var: @max }
Original: Integer
Difference encountered for GraphsController#@geom.
Inferred: { GraphsController# var: @geom }
Original: String
Difference encountered for GraphsController#@graph.
Inferred: (Gruff::Line or Gruff::Pie)
Original: Gruff::Base
Difference encountered for GraphsController#@series.
Inferred: Hash<Question, []>
Original: Hash<Question, Array<Integer>>
Difference encountered for RootController#@page_title.
Inferred: 'Dashboard'
Original: String
Difference encountered for RootController#@my_questionnaires.
Inferred: { RootController# var: @my_questionnaires }
Original: Array<Questionnaire>
Difference encountered for QuestionnairesController#@questionnaires.
Inferred: ({ { { { { { [s]Questionnaire#accessible_by ret: ret }#order ret: ret }#group ret: ret }#includes ret: ret }#references ret: ret }#paginate ret: ret } or { { { { { { { [s]Questionnaire#accessible_by ret: ret }#order ret: ret }#group ret: ret }#includes ret: ret }#references ret: ret }#where ret: ret }#paginate ret: ret })
Original: ActiveRecord_Relation<JoinTable<Questionnaire, (Person or QuestionnairePermission or Tag)>>
Difference encountered for QuestionnairesController#@rss_url.
Inferred: { QuestionnairesController# var: @rss_url }
Original: String
Difference encountered for AnswerController#@previewing.
Inferred: true
Original: (false or true)
Difference encountered for _Globals#$!.
Inferred: [ to_s: () -> String ]
Original: String
Difference encountered for ResponsesController#@questionnaire.
Inferred: [ email_notifications: () -> { { ResponsesController# var: @questionnaire }#email_notifications ret: ret } ]
Original: Questionnaire
Difference encountered for ResponsesController#@email_notification.
Inferred: { ResponsesController# var: @email_notification }
Original: EmailNotification
# 4
Difference encountered for ResponsesCsvExporter#each_row.
Inferred: () { (((Array<(String or { { { { { ResponsesCsvExporter#answers_table ret: ret }#order ret: ret }#select ret: ret }#each block_arg: db_row }#[] ret: ret })> or Array<(String or { { { { { ResponsesCsvExporter#answers_table ret: ret }#order ret: ret }#select ret: ret }#each block_arg: db_row }#[] ret: ret })> or Array<(String or { { { { { ResponsesCsvExporter#answers_table ret: ret }#order ret: ret }#select ret: ret }#each block_arg: db_row }#[] ret: ret })> or Array<(String or { { { { { ResponsesCsvExporter#answers_table ret: ret }#order ret: ret }#select ret: ret }#each block_arg: db_row }#[] ret: ret })> or Array<(String or { { { { { ResponsesCsvExporter#answers_table ret: ret }#order ret: ret }#select ret: ret }#each block_arg: db_row }#[] ret: ret })> or Array<(String or { { { { { ResponsesCsvExporter#answers_table ret: ret }#order ret: ret }#select ret: ret }#each block_arg: db_row }#[] ret: ret })> or Array<(String or { { { { { ResponsesCsvExporter#answers_table ret: ret }#order ret: ret }#select ret: ret }#each block_arg: db_row }#[] ret: ret })> or Array<(String or { { { { { ResponsesCsvExporter#answers_table ret: ret }#order ret: ret }#select ret: ret }#each block_arg: db_row }#[] ret: ret })> or Array<(String or { { { { { ResponsesCsvExporter#answers_table ret: ret }#order ret: ret }#select ret: ret }#each block_arg: db_row }#[] ret: ret })> or Array<(String or { { { { { ResponsesCsvExporter#answers_table ret: ret }#order ret: ret }#select ret: ret }#each block_arg: db_row }#[] ret: ret })>)) -> { ResponsesCsvExporter#each_row block_ret: block_return } and ((Array<(String or { { { { { ResponsesCsvExporter#answers_table ret: ret }#order ret: ret }#select ret: ret }#each block_arg: db_row }#[] ret: ret })> or Array<(String or { { { { { ResponsesCsvExporter#answers_table ret: ret }#order ret: ret }#select ret: ret }#each block_arg: db_row }#[] ret: ret })> or Array<(String or { { { { { ResponsesCsvExporter#answers_table ret: ret }#order ret: ret }#select ret: ret }#each block_arg: db_row }#[] ret: ret })> or Array<(String or { { { { { ResponsesCsvExporter#answers_table ret: ret }#order ret: ret }#select ret: ret }#each block_arg: db_row }#[] ret: ret })> or Array<(String or { { { { { ResponsesCsvExporter#answers_table ret: ret }#order ret: ret }#select ret: ret }#each block_arg: db_row }#[] ret: ret })> or Array<(String or { { { { { ResponsesCsvExporter#answers_table ret: ret }#order ret: ret }#select ret: ret }#each block_arg: db_row }#[] ret: ret })> or Array<(String or { { { { { ResponsesCsvExporter#answers_table ret: ret }#order ret: ret }#select ret: ret }#each block_arg: db_row }#[] ret: ret })> or Array<(String or { { { { { ResponsesCsvExporter#answers_table ret: ret }#order ret: ret }#select ret: ret }#each block_arg: db_row }#[] ret: ret })>)) -> { ResponsesCsvExporter#each_row block_ret: block_return } and ((Array<(String or { { { { { ResponsesCsvExporter#answers_table ret: ret }#order ret: ret }#select ret: ret }#each block_arg: db_row }#[] ret: ret })> or Array<(String or { { { { { ResponsesCsvExporter#answers_table ret: ret }#order ret: ret }#select ret: ret }#each block_arg: db_row }#[] ret: ret })> or Array<(String or { { { { { ResponsesCsvExporter#answers_table ret: ret }#order ret: ret }#select ret: ret }#each block_arg: db_row }#[] ret: ret })> or Array<(String or { { { { { ResponsesCsvExporter#answers_table ret: ret }#order ret: ret }#select ret: ret }#each block_arg: db_row }#[] ret: ret })> or Array<(String or { { { { { ResponsesCsvExporter#answers_table ret: ret }#order ret: ret }#select ret: ret }#each block_arg: db_row }#[] ret: ret })>)) -> { ResponsesCsvExporter#each_row block_ret: block_return } and (Array<('Submitted' or DateTime or Time)>) -> { ResponsesCsvExporter#each_row block_ret: block_return } and (Array<(Integer or String)>) -> { ResponsesCsvExporter#each_row block_ret: block_return }) } -> nil
Original: () {(%any) -> %any} -> %any
# 7
Difference encountered for RootController#dashboard.
Inferred: () -> (ActiveRecord_Relation<JoinTable<Response, Questionnaire>> or String)
Original: () -> %any
Difference encountered for [s]Answer#find_answer.
Inferred: ([ id: () -> { { [s]Answer#find_answer arg: resp }#id ret: ret } ], [ id: () -> { { [s]Answer#find_answer arg: question }#id ret: ret } ]) -> Answer
Original: (Response, Question) -> Answer
Difference encountered for QuestionnairePermission#email=.
Inferred: ((String or Symbol)) -> (Array<String> or Person)
Original: (String) -> %any
Difference encountered for Response#answer_for_question.
Inferred: ({ Response#answer_for_question arg: question }) -> Answer
Original: (Question) -> Answer
Difference encountered for ResponsesController#get_email_notification.
Inferred: () -> { ResponsesController#get_email_notification ret: ret }
Original: () -> EmailNotification
Difference encountered for RootController#index.
Inferred: () -> String
Original: () -> %any
Difference encountered for AnswerController#answer_given.
Inferred: ([ to_s: () -> String ]) -> (false or true)
Original: (Integer) -> (false or true)
Difference encountered for AnswerController#validate_answers.
Inferred: ({ AnswerController#validate_answers arg: resp }, [ questions: () -> { { AnswerController#validate_answers arg: page }#questions ret: ret } ]) -> Array<String>
Original: (Response, Page) -> Array<String>
# 15 manually counted correct
Total correct (that could be automatically inferred): 28
Total potential types: 59

# Final: 43/59
